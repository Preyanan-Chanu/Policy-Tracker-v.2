"use client";

import { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { storage } from "@/app/lib/firebase";
import { ref, uploadBytes, getDownloadURL, listAll, deleteObject } from "firebase/storage";
import PRSidebar from "../components/PRSidebar";
import { useRouter } from "next/navigation";
import { setDoc, doc, getDoc, collection, getDocs, deleteDoc } from "firebase/firestore";
import { firestore } from "@/app/lib/firebase";

export default function PRPolicyForm() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [policyName, setPolicyName] = useState<string>("");
  const [policyCategory, setPolicyCategory] = useState("‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à");
  const [policyDes, setPolicyDes] = useState("");
  const [policyBanner, setPolicyBanner] = useState<File | null>(null);
  const [policyPDF, setPolicyPDF] = useState<File | null>(null);
  const [partyName, setPartyName] = useState("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏£‡∏Ñ");
  const [bannerPreviewUrl, setBannerPreviewUrl] = useState<string | null>(null);
  const [pdfPreviewUrl, setPdfPreviewUrl] = useState<string | null>(null);
  const [achievementProcess, setAchievementProcess] = useState("");
  const [achievementPolicy, setAchievementPolicy] = useState("");
  const [achievementProject, setAchievementProject] = useState("");
  const [timelineItems, setTimelineItems] = useState<
    { id?: string; name: string; date: string; description: string; rawDate: string }[]
  >([]);

  const [pictures, setPictures] = useState<File[]>([]);

  const [pictureUrls, setPictureUrls] = useState<string[]>([]);
  const [picturesToDelete, setPicturesToDelete] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);


  const searchParams = useSearchParams();
  const policyId = searchParams.get("policy_id");

  const router = useRouter();

  const previewUrls = useMemo(() => {
    return pictures.map((file) => URL.createObjectURL(file));
  }, [pictures]);

  useEffect(() => {
    if (!policyId) return;

    const fetchPolicy = async () => {
      const res = await fetch(`/api/pr-policy/${policyId}`);
      const data = await res.json();

      setPolicyName(data.name || "");
      setPolicyCategory(data.category || "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à");
      setPolicyDes(data.description || "");
      // ‡πÇ‡∏´‡∏•‡∏î preview image/pdf ‡∏ï‡∏≤‡∏° id
    };

    fetchPolicy();
  }, [policyId]);



  useEffect(() => {
    const storedParty = localStorage.getItem("partyName");
    if (storedParty && storedParty !== "") {
      setPartyName(storedParty);
    } else {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    }
  }, []);

  useEffect(() => {
    if (!policyId) return;

    const fetchPolicy = async () => {
      try {
        const res = await fetch(`/api/pr-policy/${policyId}`);
        const data = await res.json();

        const cleanName = data.name ? data.name.trim() : "";
        setPolicyName(data.name || "");
        setPolicyCategory(data.category || "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à");
        setPolicyDes(data.description || "");

        // ‚úÖ Banner: .jpg ‡∏´‡∏£‡∏∑‡∏≠ .png
        try {
          const jpgRef = ref(storage, `policy/banner/${policyId}.jpg`);
          const jpgUrl = await getDownloadURL(jpgRef);
          setBannerPreviewUrl(jpgUrl);
        } catch {
          try {
            const pngRef = ref(storage, `policy/banner/${policyId}.png`);
            const pngUrl = await getDownloadURL(pngRef);
            setBannerPreviewUrl(pngUrl);
          } catch { }
        }

        // ‚úÖ PDF
        try {
          const pdfRef = ref(storage, `policy/reference/${policyId}.pdf`);
          const pdfUrl = await getDownloadURL(pdfRef);
          setPdfPreviewUrl(pdfUrl);
        } catch { }
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      }
    };

    fetchPolicy();
  }, [policyId]);

  useEffect(() => {
    if (!policyId) return;

    // üîπ ‡πÇ‡∏´‡∏•‡∏î achievement
    const fetchAchievements = async () => {
      const paths = [
        { key: "process", label: "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£" },
        { key: "policy", label: "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á" },
        { key: "project", label: "‡πÄ‡∏ä‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£" },
      ];

      for (const { key, label } of paths) {
        const docRef = doc(firestore, "Policy", policyId, "achievement", label);
        const snap = await getDoc(docRef);
        if (snap.exists()) {
          const data = snap.data();
          if (key === "process") setAchievementProcess(data.description || "");
          if (key === "policy") setAchievementPolicy(data.description || "");
          if (key === "project") setAchievementProject(data.description || "");
        }
      }
    };

    // üîπ ‡πÇ‡∏´‡∏•‡∏î timeline
    const fetchTimeline = async () => {
      const timelineRef = collection(firestore, "Policy", policyId, "sequence");
      const snapshot = await getDocs(timelineRef);

      function thaiDateToISO(thaiDate: string): string {
        const thMonths: Record<string, string> = {
          "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
          "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
          "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12",
        };

        const [d, m, y] = thaiDate.split(" ");
        return `${+y - 543}-${thMonths[m]}-${d.padStart(2, "0")}`;
      }


      const items = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id, // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ/‡∏•‡∏ö
          name: data.name,
          date: data.date,
          description: data.description,
          rawDate: thaiDateToISO(data.date), // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á date ‡∏Å‡∏•‡∏±‡∏ö yyyy-MM-dd ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°
        };
      });

      const sorted = items.sort((a, b) => {
        const parse = (str: string) => {
          const thMonths: Record<string, number> = {
            "‡∏°.‡∏Ñ.": 0, "‡∏Å.‡∏û.": 1, "‡∏°‡∏µ.‡∏Ñ.": 2, "‡πÄ‡∏°.‡∏¢.": 3,
            "‡∏û.‡∏Ñ.": 4, "‡∏°‡∏¥.‡∏¢.": 5, "‡∏Å.‡∏Ñ.": 6, "‡∏™.‡∏Ñ.": 7,
            "‡∏Å.‡∏¢.": 8, "‡∏ï.‡∏Ñ.": 9, "‡∏û.‡∏¢.": 10, "‡∏ò.‡∏Ñ.": 11
          };
          const [d, m, y] = str.split(" ");
          return new Date(parseInt(y) - 543, thMonths[m], parseInt(d));
        };

        return parse(b.date).getTime() - parse(a.date).getTime();
      });

      setTimelineItems(sorted);
    };

    fetchAchievements();
    fetchTimeline();
  }, [policyId]);

  useEffect(() => {
    if (policyBanner) {
      const objectUrl = URL.createObjectURL(policyBanner);
      setBannerPreviewUrl(objectUrl);

      return () => URL.revokeObjectURL(objectUrl); // cleanup
    }
  }, [policyBanner]);


  useEffect(() => {
    if (!policyId) return;

    const loadPictures = async () => {
      try {
        const folderRef = ref(storage, `policy/picture/${policyId}`);
        const result = await listAll(folderRef);
        const urls = await Promise.all(
          result.items.map((itemRef) => getDownloadURL(itemRef))
        );
        setPictureUrls(urls);
      } catch (err) {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:", err);
      }
    };

    loadPictures();
  }, [policyId]);

  const handleFileChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    setFile: (file: File | null) => void
  ) => {
    if (event.target.files) setFile(event.target.files[0]);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setIsSubmitting(true);
    const isEditing = Boolean(policyId); // true = PUT, false = POST
    const idToUse = policyId ?? ""; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö path firebase ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ


    let bannerUrl = "";
    try {
      

      const payload = {
        ...(policyId && { id: policyId }),
        name: policyName,
        description: policyDes,
        banner: bannerUrl,
        category: policyCategory,
        party: partyName,
      };

      const res = await fetch("/api/prPolicyForm", {
        method: isEditing ? "PUT" : "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const text = await res.text();
        alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + text);
        return;
      }

      const { id: newId } = await res.json();
      const idUsed = isEditing ? policyId! : newId;
      const idStr = idUsed.toString();

      if (policyBanner) {
  const bannerRef = ref(storage, `policy/banner/${idUsed}.jpg`);
  await uploadBytes(bannerRef, policyBanner);
  bannerUrl = await getDownloadURL(bannerRef);
}

if (policyPDF) {
  const pdfRef = ref(storage, `policy/reference/${idUsed}.pdf`);
  await uploadBytes(pdfRef, policyPDF);
}
      // ‚úÖ ‡πÉ‡∏ä‡πâ idUsed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase Storage ‡πÅ‡∏•‡∏∞ Firestore
      await setDoc(doc(firestore, "Policy", idStr, "achievement", "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£"), {
        name: "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£",
        description: achievementProcess,
      });

      if (pictures.length > 0) {
        const uploadPromises = pictures.map((file) => {
          const uniqueName = `${Date.now()}_${file.name}`;
          const picRef = ref(storage, `policy/picture/${idUsed}/${uniqueName}`);
          return uploadBytes(picRef, file);
        });

        await Promise.all(uploadPromises);

        const folderRef = ref(storage, `policy/picture/${idUsed}`);
        const result = await listAll(folderRef);
        const urls = await Promise.all(result.items.map((itemRef) => getDownloadURL(itemRef)));
        setPictureUrls(urls);
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï achievement ‡∏ó‡∏±‡πâ‡∏á 3
      await Promise.all([
        setDoc(doc(firestore, "Policy", idStr, "achievement", "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£"), {
          name: "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£",
          description: achievementProcess,
        }),
        setDoc(doc(firestore, "Policy", idStr, "achievement", "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á"), {
          name: "‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
          description: achievementPolicy,
        }),
        setDoc(doc(firestore, "Policy", idStr, "achievement", "‡πÄ‡∏ä‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"), {
          name: "‡πÄ‡∏ä‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
          description: achievementProject,
        }),
      ]);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timeline
      const timelineRef = collection(firestore, "Policy", idStr, "sequence");
      const existingSnapshot = await getDocs(timelineRef);
      const existingIds = existingSnapshot.docs.map((doc) => doc.id);
      const currentIds = timelineItems.map((item) => item.id).filter((id) => id != null);

      const deletedIds = existingIds.filter((id) => !currentIds.includes(id));
      for (const id of deletedIds) {
        await deleteDoc(doc(firestore, "Policy", idUsed, "sequence", id));
      }

      for (const item of timelineItems) {
        if (item.id && item.id !== item.date.trim()) {
          await deleteDoc(doc(firestore, "Policy", idUsed, "sequence", item.id));
        }

        await setDoc(doc(firestore, "Policy", idStr, "sequence", item.date.trim()), {
          name: item.name,
          date: item.date,
          description: item.description,
        });
      }

      // ‚úÖ ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö
      for (const path of picturesToDelete) {
        try {
          const fileRef = ref(storage, path);
          await deleteObject(fileRef);
        } catch (err) {
          console.warn("‚ö†Ô∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        }
      }

      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      router.replace("/prPolicy");
    } catch (err) {
      console.error("Error saving policy:", err);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    } finally {
      setIsSubmitting(false); // ‚úÖ ‡∏à‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    }
  };


  return (
    <div className="min-h-screen bg-[#9795B5] flex">
      <PRSidebar />
      <div className="flex-1 md:ml-64">
        <header className="bg-white p-4 shadow-md flex justify-between items-center sticky top-0 z-10">
          <h1 className="text-2xl font-bold text-[#5D5A88]">PR ‡∏û‡∏£‡∏£‡∏Ñ {partyName}</h1>
          <button onClick={() => setMenuOpen(!menuOpen)} className="md:hidden text-3xl text-[#5D5A88]">‚ò∞</button>
          <ul className="hidden md:flex space-x-4">
            <li>
              <Link href="/login" className="text-[#5D5A88] px-4 py-2 hover:bg-gray-200 rounded-md">
                ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
              </Link>
            </li>
          </ul>
        </header>

        <main className="p-6">
          <h2 className="text-3xl text-white text-center">‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢</h2>
          <div className="mt-6 bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto">
            <form onSubmit={handleSubmit} className="space-y-4">
              <label className="block font-bold">‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢:</label>
              <input type="text" value={policyName} onChange={(e) => setPolicyName(e.target.value)} required disabled={!!policyId} className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢:</label>
              <select value={policyCategory} onChange={(e) => setPolicyCategory(e.target.value)} required className="w-full p-2 border border-gray-300 rounded-md">
                {["‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à", "‡∏™‡∏±‡∏á‡∏Ñ‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£", "‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°", "‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç ‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢", "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê", "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
                  .map((category) => <option key={category} value={category}>{category}</option>)}
              </select>

              <label className="block font-bold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢:</label>
              <textarea value={policyDes} onChange={(e) => setPolicyDes(e.target.value)} rows={5} required className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£:</label>
              <textarea value={achievementProcess} onChange={(e) => setAchievementProcess(e.target.value)} rows={2} className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á:</label>
              <textarea value={achievementPolicy} onChange={(e) => setAchievementPolicy(e.target.value)} rows={2} className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ä‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
              <textarea value={achievementProject} onChange={(e) => setAchievementProject(e.target.value)} rows={2} className="w-full p-2 border border-gray-300 rounded-md" />

              {/* ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå */}
              <label className="block font-bold mt-6">‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (Timeline):</label>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå */}
              <button
                type="button"
                onClick={() => setTimelineItems([{ name: "", date: "", description: "", rawDate: "" }, ...timelineItems])}
                className="bg-[#e0e0e0] px-4 py-2 rounded-md hover:bg-[#ccc] text-[#333]"
              >
                ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
              </button>

              {timelineItems.map((item, idx) => {
                const actualIndex = timelineItems.length - idx - 1;

                return (


                  <div key={item.id ?? idx} className="flex flex-col mb-4 border p-4 rounded-md relative bg-[#f9f9f9]">
                    <span className="text-[#5D5A88] font-bold mb-2">‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà {timelineItems.length - idx}</span>

                    {timelineItems.length > 1 ? (
                      <button
                        type="button"
                        onClick={() => {
                          const newItems = timelineItems.filter((_, i) => i !== idx);
                          setTimelineItems(newItems);
                        }}
                        className="text-red-600 hover:text-red-800 self-end mb-4"
                      >
                        ‚ùå ‡∏•‡∏ö
                      </button>
                    ) : (
                      <div className="text-sm text-gray-400 self-end mb-4">
                        ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </div>
                    )}

                    <input
                      type="text"
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"
                      value={item.name}
                      onChange={(e) => {
                        const newItems = [...timelineItems];
                        newItems[idx].name = e.target.value;
                        setTimelineItems(newItems);
                      }}
                      className="w-full mb-2 p-2 border border-gray-300 rounded-md"
                    />

                    <input
                      type="date"
                      value={item.rawDate}
                      onChange={(e) => {
                        const raw = e.target.value; // "2025-06-30"
                        if (!raw) return;

                        // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Date
                        const [year, month, day] = raw.split("-").map(Number);

                        const thaiMonths = [
                          "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.",
                          "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.",
                          "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
                        ];

                        const formatted = `${day} ${thaiMonths[month - 1]} ${year + 543}`;

                        const newItems = [...timelineItems];
                        newItems[idx].rawDate = raw; // yyyy-MM-dd
                        newItems[idx].date = formatted; // 30 ‡∏°‡∏¥.‡∏¢. 2568
                        setTimelineItems(newItems);
                      }}
                      className="w-full mb-2 p-2 border border-gray-300 rounded-md"
                    />



                    <textarea
                      placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"
                      value={item.description}
                      onChange={(e) => {
                        const newItems = [...timelineItems];
                        newItems[idx].description = e.target.value;
                        setTimelineItems(newItems);
                      }}
                      rows={2}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    />


                  </div>
                );
              })}




              <label className="block font-bold">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå (JPG, PNG):</label>
              <input type="file" accept="image/jpeg, image/png" onChange={(e) => handleFileChange(e, setPolicyBanner)} />
              {bannerPreviewUrl && (
                <img src={bannerPreviewUrl} alt="Banner" className="w-full rounded-md mb-2" />
              )}

              {/* üîΩ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ preview ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
              <label className="block font-bold mt-4">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>

              <input

                type="file"
                accept="image/*"
                multiple
                onChange={(e) => {
                  const files = e.target.files;
                  if (files) {
                    setPictures((prev) => [...prev, ...Array.from(files)]);
                  }
                }}
                className="w-full"
              />

              {/* üîΩ preview ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
              {pictures.length > 0 && (
                <div className="mt-4">
                  <h3 className="font-bold text-[#5D5A88] mb-2">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ:</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {pictures.map((file, idx) => (

                      <div key={idx} className="relative">
                        <img
                          src={previewUrls[idx]}
                          alt={`preview-${idx}`}
                          className="rounded-md shadow-md w-full h-auto"
                        />
                        <button
                          type="button"
                          onClick={() => {
                            const updated = pictures.filter((_, i) => i !== idx);
                            setPictures(updated);
                          }}
                          className="absolute top-2 right-2 text-white bg-red-500 rounded-full px-2 py-0.5 text-xs hover:bg-red-700"
                        >
                          ‚úï
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}


              {/* üîΩ ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Storage ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß */}
              {pictureUrls.length > 0 && (
                <div className="mt-6">
                  <h3 className="font-bold text-[#5D5A88] mb-2">‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß:</h3>

                  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                    {pictureUrls.map((url, idx) => (
                      <div key={idx} className="relative">
                        <img
                          src={url}
                          alt={`uploaded-${idx}`}
                          className="rounded-md shadow-md w-full h-auto"
                        />
                        <button
                          type="button"
                          onClick={async () => {
                            const decodedUrl = decodeURIComponent(url);
                            const match = decodedUrl.match(/\/o\/(.+)\?/);
                            const path = match ? match[1] : null;

                            if (!path) {
                              alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
                              return;
                            }

                            // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö path ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
                            setPicturesToDelete((prev) => [...prev, path]);

                            // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å preview ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                            const updated = pictureUrls.filter((_, i) => i !== idx);
                            setPictureUrls(updated);
                          }}
                          className="absolute top-2 right-2 bg-red-600 text-white rounded-full px-2 py-0.5 text-sm hover:bg-red-700"
                        >
                          ‚úï
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}




              <label className="block font-bold">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (PDF):</label>
              <input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, setPolicyPDF)} />
              {pdfPreviewUrl && (
                <a href={pdfPreviewUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">
                  üîó ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (PDF)
                </a>
              )}

              <button
                type="submit"
                className={`w-full p-3 rounded-md mt-4 text-white ${isSubmitting ? "bg-gray-400 cursor-not-allowed" : "bg-[#5D5A88] hover:bg-[#46426b]"}`}
                disabled={isSubmitting}
              >
                {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
              </button>

            </form>
          </div>
        </main>
      </div>
    </div>
  );
}