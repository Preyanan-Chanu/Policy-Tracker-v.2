// ‚úÖ page.tsx - Event Form Page (with province dropdown and map marker)
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";
import PRSidebar from "../components/PRSidebar";
import { GoogleMap, Marker, useJsApiLoader } from "@react-google-maps/api";
import {ref, uploadBytes, getDownloadURL, listAll, deleteObject, } from "firebase/storage";
import { storage } from "@/app/lib/firebase";
import { useGoogleMapsLoader } from "@/app/lib/googleMapsLoader";


const containerStyle = {
  width: "100%",
  height: "400px",
};

const PROVINCES = [
  "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£",
  "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥",
  "‡∏ä‡∏∏‡∏°‡∏û‡∏£", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏ï‡∏£‡∏±‡∏á", "‡∏ï‡∏£‡∏≤‡∏î", "‡∏ï‡∏≤‡∏Å", "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å",
  "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä", "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå",
  "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™", "‡∏ô‡πà‡∏≤‡∏ô", "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ",
  "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå", "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤",
  "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", "‡∏û‡∏±‡∏á‡∏á‡∏≤", "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á", "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£", "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ",
  "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå", "‡πÅ‡∏û‡∏£‡πà", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£", "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô",
  "‡∏¢‡πÇ‡∏™‡∏ò‡∏£", "‡∏¢‡∏∞‡∏•‡∏≤", "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î", "‡∏£‡∏∞‡∏ô‡∏≠‡∏á", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ",
  "‡∏•‡∏≥‡∏õ‡∏≤‡∏á", "‡∏•‡∏≥‡∏û‡∏π‡∏ô", "‡πÄ‡∏•‡∏¢", "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©", "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£", "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "‡∏™‡∏ï‡∏π‡∏•",
  "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£", "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
  "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå",
  "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢", "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π", "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç", "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
  "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå", "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ"
];

export default function PREventForm() {
  const [eventName, setEventName] = useState("");
  const [policyName, setPolicyName] = useState("");
  const [eventDes, setEventDes] = useState("");
  const [eventDate, setEventDate] = useState("");
  const [eventTime, setEventTime] = useState("");
  const [eventLocation, setEventLocation] = useState("");
  const [province, setProvince] = useState("");
  const [markerPos, setMarkerPos] = useState<{ lat: number; lng: number } | null>(null);
  const [partyName, setPartyName] = useState("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏£‡∏Ñ");
  const [policies, setPolicies] = useState<string[]>([]);
  const [campaigns, setCampaigns] = useState<string[]>([]);
  const [selectedCampaign, setSelectedCampaign] = useState("");
  const [eventStatus, setEventStatus] = useState("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
  const searchParams = useSearchParams();
  const eventId = searchParams.get("event_id");
  const isEditing = !!eventId;
  const libraries: ("places")[] = ["places"];
  const [eventPictures, setEventPictures] = useState<File[]>([]);
const [uploadedPictureUrls, setUploadedPictureUrls] = useState<string[]>([]);
const [picturesToDelete, setPicturesToDelete] = useState<string[]>([]);
const [bannerFile, setBannerFile] = useState<File | null>(null);
const [bannerPreview, setBannerPreview] = useState<string | null>(null);





  const router = useRouter();

  const { isLoaded } = useGoogleMapsLoader();
  

  useEffect(() => {
    const stored = localStorage.getItem("partyName");
    if (stored) {
      setPartyName(stored);
      fetch(`/api/prEventForm?party=${encodeURIComponent(stored)}`)
        .then((res) => res.json())
        .then((data) => setPolicies(data.policies || []));
    } else {
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    }
  }, []);

  useEffect(() => {
    if (policyName) {
      fetch(`/api/prEventForm?policy=${encodeURIComponent(policyName)}`)
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data.campaigns)) {
            setCampaigns(data.campaigns);
          } else {
            setCampaigns([]);
          }
        });
    } else {
      setCampaigns([]);
    }
  }, [policyName]);

  useEffect(() => {
    if (!eventId) return;

    const fetchEventData = async () => {
      const res = await fetch(`/api/pr-event/${eventId}`);
      const data = await res.json();

      setEventName(data.name || "");
      setEventDes(data.description || "");
      setEventDate(data.date || "");
      setEventTime(data.time || "");
      setEventLocation(data.location || "");
      setProvince(data.province || "");
      setMarkerPos(data.map ? {
        lat: parseFloat(data.map.split(",")[0]),
        lng: parseFloat(data.map.split(",")[1]),
      } : null);
      setPolicyName(data.policy || "");
      setSelectedCampaign(data.campaign || "");
      setEventStatus(data.status || "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
       console.log("üì¶ Event province:", data.province);

       try {
  const folderRef = ref(storage, `event/picture/${eventId}`);
  const listResult = await listAll(folderRef);
  const urls = await Promise.all(listResult.items.map((item) => getDownloadURL(item)));
  setUploadedPictureUrls(urls);
} catch (err) {
  console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:", err);
}

try {
      const bannerJpg = `event/banner/${eventId}.jpg`;
const bannerPng = `event/banner/${eventId}.png`;

      try {
        const jpgUrl = await getDownloadURL(ref(storage, bannerJpg));
        setBannerPreview(jpgUrl);
      } catch {
        const pngUrl = await getDownloadURL(ref(storage, bannerPng));
        setBannerPreview(pngUrl);
      }
    } catch {
      setBannerPreview(null);
    }

    };

    

      fetchEventData();
  }, [eventId]);



  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  if (!markerPos || !province) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î");
    return;
  }

  const payload = {
    id: eventId,
    name: eventName,
    description: eventDes,
    date: eventDate,
    time: eventTime,
    location: eventLocation,
    province,
    map: `${markerPos.lat},${markerPos.lng}`,
    policy: policyName,
    party: partyName,
    campaign: selectedCampaign,
    status: eventStatus,
  };

  const res = await fetch("/api/prEventForm", {
    method: eventId ? "PUT" : "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  const result = await res.json();

  const id = eventId || result.id; // ‡πÉ‡∏ä‡πâ eventId ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡πÉ‡∏ä‡πâ result.id ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  if (!id) {
    alert("‡πÑ‡∏°‡πà‡∏û‡∏ö event ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ");
    return;
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î banner
  if (bannerFile) {
    const fileExt = bannerFile.name.split(".").pop()?.toLowerCase() === "png" ? "png" : "jpg";
    const bannerRef = ref(storage, `event/banner/${id}.${fileExt}`);
    await uploadBytes(bannerRef, bannerFile);
  }

  // ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
  for (const path of picturesToDelete) {
    try {
      const fileRef = ref(storage, path);
      await deleteObject(fileRef);
    } catch (err) {
      console.warn("‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
  for (const file of eventPictures) {
    const uniqueName = `${Date.now()}_${file.name}`;
    const imageRef = ref(storage, `event/picture/${id}/${uniqueName}`);
    await uploadBytes(imageRef, file);
  }

  if (res.ok) {
    alert(eventId ? "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    router.push("/prEvent");
  } else {
    const text = await res.text();
    alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + text);
  }
};

  

  return (
    <div className="min-h-screen bg-[#9795B5] flex">
      <PRSidebar />
      <div className="flex-1 md:ml-64 p-6">
        <h2 className="text-3xl text-white text-center">‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h2>
        <div className="mt-6 bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto">
          <form onSubmit={handleSubmit} className="space-y-4">
            <label className="block font-bold">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
            <input required value={eventName} onChange={(e) => setEventName(e.target.value)} className="w-full p-2 border rounded" />

            <label className="block font-bold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
            <textarea required value={eventDes} onChange={(e) => setEventDes(e.target.value)} className="w-full p-2 border rounded" />

            {isEditing && (
              <>
                <label className="block font-bold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
                <select
                  value={eventStatus}
                  onChange={(e) => setEventStatus(e.target.value)}
                  className="w-full p-2 border rounded"
                >
                  <option value="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</option>
                  <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                  <option value="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
                  <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                </select>
              </>
            )}


            <label className="block font-bold">‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
            <input required type="date" value={eventDate} onChange={(e) => setEventDate(e.target.value)} className="w-full p-2 border rounded" />

            <label className="block font-bold">‡πÄ‡∏ß‡∏•‡∏≤:</label>
            <input required value={eventTime} onChange={(e) => setEventTime(e.target.value)} className="w-full p-2 border rounded" />

            <label className="block font-bold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</label>
            <input required value={eventLocation} onChange={(e) => setEventLocation(e.target.value)} className="w-full p-2 border rounded" />

            <label className="block font-bold">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
            <select required value={province} onChange={(e) => setProvince(e.target.value)} className="w-full p-2 border rounded">
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î --</option>
             {PROVINCES.map((p, idx) => (
    <option key={`province-${idx}`} value={p}>{p}</option>
  ))}
            </select>

            <label className="block font-bold">‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:</label>
            <select value={policyName} onChange={(e) => setPolicyName(e.target.value)} className="w-full p-2 border rounded">
              <option value="">-- ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ --</option>
             {policies.map((p, idx) => (
    <option key={`policy-${idx}`} value={p}>{p}</option>
  ))}
            </select>

            <label className="block font-bold">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:</label>
            <select value={selectedCampaign} onChange={(e) => setSelectedCampaign(e.target.value)} className="w-full p-2 border rounded">
              <option value="">-- ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ --</option>
              {campaigns.map((c, idx) => (
    <option key={`campaign-${idx}`} value={c}>{c}</option>
  ))}
            </select>
             
            <label className="block font-bold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà:</label>
            {isLoaded && (
              <GoogleMap
                mapContainerStyle={containerStyle}
                center={markerPos || { lat: 13.736717, lng: 100.523186 }}
                zoom={markerPos ? 14 : 12}
                onClick={(e) =>
                  setMarkerPos({ lat: e.latLng?.lat() || 0, lng: e.latLng?.lng() || 0 })
                }
              >
                {markerPos && <Marker position={markerPos} />}
              </GoogleMap>
            )}

            <label className="block font-bold">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
<input
  type="file"
  accept="image/*"
  multiple
  onChange={(e) => {
    if (e.target.files) {
      setEventPictures([...eventPictures, ...Array.from(e.target.files)]);
    }
  }}
  className="w-full"
/>

{/* ‡∏£‡∏π‡∏õ preview ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
{eventPictures.length > 0 && (
  <div className="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4">
    {eventPictures.map((file, idx) => (
      <div key={idx} className="relative">
        <img src={URL.createObjectURL(file)} className="rounded shadow w-full" />
        <button
          type="button"
          onClick={() => setEventPictures(eventPictures.filter((_, i) => i !== idx))}
          className="absolute top-2 right-2 bg-red-600 text-white rounded-full text-xs px-2"
        >
          ‚úï
        </button>
      </div>
    ))}
  </div>
)}

{/* ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Storage ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß */}
{uploadedPictureUrls.length > 0 && (
  <div className="mt-6">
    <h3 className="font-bold text-[#5D5A88] mb-2">‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß:</h3>
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
      {uploadedPictureUrls.map((url, idx) => (
        <div key={idx} className="relative">
          <img src={url} className="rounded shadow w-full" />
          <button
            type="button"
            onClick={() => {
              const match = decodeURIComponent(url).match(/\/o\/(.+)\?/);
              const path = match?.[1];
              if (!path) return;
              setPicturesToDelete((prev) => [...prev, path]);
              setUploadedPictureUrls(uploadedPictureUrls.filter((_, i) => i !== idx));
            }}
            className="absolute top-2 right-2 bg-red-600 text-white rounded-full text-xs px-2"
          >
            ‚úï
          </button>
        </div>
      ))}
    </div>
  </div>
)}


<div className="mb-4">
  <label className="block font-bold">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Banner ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
  <input
  type="file"
  accept="image/*"
  onChange={(e) => {
    const file = e.target.files?.[0] || null;
    setBannerFile(file);
    if (file) setBannerPreview(URL.createObjectURL(file));
  }}
  className="mb-4"
/>

</div>

{bannerPreview && (
  <div className="mt-2">
    <p className="text-sm text-[#5D5A88]">Preview:</p>
    <img src={bannerPreview} alt="Banner Preview" className="h-100 rounded shadow-md" />
  </div>
)}



            <button type="submit" className="w-full bg-[#5D5A88] text-white py-2 rounded">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            
          </form>
        </div>
      </div>
    </div>
  );
}
