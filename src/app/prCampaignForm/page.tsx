"use client";

import { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { ref, uploadBytes, getDownloadURL, listAll, deleteObject, } from "firebase/storage";
import { storage } from "@/app/lib/firebase";
import PRSidebar from "@/app/components/PRSidebar";

export default function PRCampaignForm() {

  interface PolicyOption {
  id: string;
  name: string;
}

  const [menuOpen, setMenuOpen] = useState(false);
  const [campaignName, setCampaignName] = useState("");
  const [campaignDes, setCampaignDes] = useState("");
  const [policyId, setPolicyId] = useState<string>("");
  const [policyName, setPolicyName] = useState("");
  const [campaignStatus, setCampaignStatus] = useState("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£");
  const [campaignBudget, setCampaignBudget] = useState("");
  const [expenses, setExpenses] = useState([{ description: "", amount: "" }]);
  const [campaignBanner, setCampaignBanner] = useState<File | null>(null);
  const [campaignRef, setCampaignRef] = useState<File | null>(null);
  const [bannerPreviewUrl, setBannerPreviewUrl] = useState<string | null>(null);
  const [refPreviewUrl, setRefPreviewUrl] = useState<string | null>(null);
  const [partyName, setPartyName] = useState("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏£‡∏Ñ");
  const [policies, setPolicies] = useState<PolicyOption[]>([]);
  const [area, setArea] = useState("‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß");
  const [impact, setImpact] = useState("‡∏ï‡πà‡∏≥");
  const [size, setSize] = useState("‡πÄ‡∏•‡πá‡∏Å");
  const [campaignPictures, setCampaignPictures] = useState<File[]>([]);
  const [uploadedPictureUrls, setUploadedPictureUrls] = useState<string[]>([]);
  const [picturesToDelete, setPicturesToDelete] = useState<string[]>([]);
  const [partyId, setPartyId] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);


  const searchParams = useSearchParams();
  const campaignId = searchParams.get("campaign_id");

  const router = useRouter();

  

  useEffect(() => {
    type Area = "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" | "‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï" | "‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®";
    type Impact = "‡∏ï‡πà‡∏≥" | "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" | "‡∏™‡∏π‡∏á";
    type Size = "‡πÄ‡∏•‡πá‡∏Å" | "‡∏Å‡∏•‡∏≤‡∏á" | "‡πÉ‡∏´‡∏ç‡πà";

    const mapSize: Record<`${Area}-${Impact}`, Size> = {
      "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß-‡∏ï‡πà‡∏≥": "‡πÄ‡∏•‡πá‡∏Å",
      "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß-‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡πÄ‡∏•‡πá‡∏Å",
      "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß-‡∏™‡∏π‡∏á": "‡∏Å‡∏•‡∏≤‡∏á",
      "‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï-‡∏ï‡πà‡∏≥": "‡πÄ‡∏•‡πá‡∏Å",
      "‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï-‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡∏Å‡∏•‡∏≤‡∏á",
      "‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï-‡∏™‡∏π‡∏á": "‡πÉ‡∏´‡∏ç‡πà",
      "‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®-‡∏ï‡πà‡∏≥": "‡∏Å‡∏•‡∏≤‡∏á",
      "‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®-‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡πÉ‡∏´‡∏ç‡πà",
      "‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®-‡∏™‡∏π‡∏á": "‡πÉ‡∏´‡∏ç‡πà",
    };

    const key = `${area}-${impact}` as `${Area}-${Impact}`;
    setSize(mapSize[key] || "‡πÄ‡∏•‡πá‡∏Å");
  }, [area, impact]);

useEffect(() => {
  const storedId = localStorage.getItem("partyId");
    const storedName = localStorage.getItem("partyName"); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

if (storedId) {
  setPartyId(Number(storedId)); // üü¢ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç
  fetch(`/api/prCampaignForm?party_id=${storedId}`)
    .then((res) => res.json())
    .then((data) => {
      let list = data ?? [];
      if (!list.some((p: { name: string }) => p.name === "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©")) {
        list = [{ id: "special", name: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©" }, ...list];
      }
      setPolicies(list);
    });
}
   if (storedName) {
    setPartyName(storedName); // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏£‡∏Ñ
  }

}, []);


  useEffect(() => {
    if (!campaignId || isNaN(Number(campaignId))) return;

    const fetchCampaign = async () => {
      const res = await fetch(`/api/pr-campaign/${campaignId}`);
      const data = await res.json();

      setCampaignName(data.name || "");
      setCampaignDes(data.description || "");
      setPolicyName(data.policy_id ? `${data.policy_id}|${data.policy}` : "");
      setCampaignStatus(data.status || "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£");
      setCampaignBudget(data.budget?.toString() || "");
      setArea(data.area || "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß");
      setImpact(data.impact || "‡∏ï‡πà‡∏≥");
      setSize(data.size || "‡πÄ‡∏•‡πá‡∏Å");
      setExpenses(data.expenses || [{ description: "", amount: "" }]);

      if (!data.isSpecial) {
      setPolicyId(data.policyId?.toString() || "");
    } else {
      setPolicyId("special");
    }

      // try {
      //   setBannerPreviewUrl(await getDownloadURL(ref(storage, `campaign/banner/${campaignId}.jpg`)));
      // } catch {}

      try {
        setRefPreviewUrl(await getDownloadURL(ref(storage, `campaign/reference/${campaignId}.pdf`)));
      } catch {}

      try {
        const listResult = await listAll(ref(storage, `campaign/picture/${campaignId}`));
        const urls = await Promise.all(listResult.items.map((item) => getDownloadURL(item)));
        setUploadedPictureUrls(urls);
      } catch {}
    };

    fetchCampaign();
  }, [campaignId]);



  const handleFileChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    setFile: (file: File | null) => void
  ) => {
    if (event.target.files) setFile(event.target.files[0]);
  };

  const handleExpenseChange = (index: number, field: "description" | "amount", value: string) => {
  const updated = [...expenses];
  updated[index] = { ...updated[index], [field]: value };
  setExpenses(updated);
};

  const addExpenseRow = () => {
    setExpenses([...expenses, { description: "", amount: "" }]);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
     setIsSubmitting(true);
     
    const isSpecial = policyId === "special";
    let finalId: string | null = campaignId;

    try {
      const payload = {
        ...(campaignId && !isNaN(Number(campaignId)) && { id: Number(campaignId) }),
        name: campaignName,
        description: campaignDes,
        status: campaignStatus,
        policy: isSpecial ? "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©" : policyName,
        policyId: isSpecial ? null : Number(policyId),
         partyId: Number(partyId),
        budget: Number(campaignBudget),
        expenses: expenses.map((e) => ({ ...e, amount: Number(e.amount) })),
        //banner: "",
        partyName,
        area,
        impact,
        size,
      };

    const res = await fetch(campaignId ? `/api/pr-campaign/${campaignId}` : `/api/prCampaignForm`, {
        method: campaignId ? "PUT" : "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const result = await res.json();
      finalId = campaignId || result.id?.toString();
      if (!res.ok || !finalId) {
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
        return;
      }

      // üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏£‡∏π‡πâ finalId
      /*if (campaignBanner) {
        await uploadBytes(ref(storage, `campaign/banner/${finalId}.jpg`), campaignBanner);
      }*/

      if (campaignRef) {
        await uploadBytes(ref(storage, `campaign/reference/${finalId}.pdf`), campaignRef);
      }

      for (const path of picturesToDelete) {
        try {
          await deleteObject(ref(storage, path));
        } catch (err) {
          console.warn("‚ö†Ô∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        }
      }

    for (const file of campaignPictures) {
        const uniqueName = `${Date.now()}_${file.name}`;
        await uploadBytes(ref(storage, `campaign/picture/${finalId}/${uniqueName}`), file);
      }

      alert(campaignId ? "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      router.push("/prCampaign");
    } catch (err) {
      console.error("‚ùå Error saving campaign:", err);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
      } finally {
    setIsSubmitting(false); // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠ error
  } 
  };


  return (
    <div className="min-h-screen bg-cover bg-center flex" style={{ backgroundImage: "url('/bg/‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠.jpg')" }}>
      <PRSidebar />
      <div className="flex-1 md:ml-64">
        <header className="bg-white p-4 shadow-md flex justify-between items-center sticky top-0 z-10">
          <h1 className="text-2xl font-bold text-[#5D5A88]">PR ‡∏û‡∏£‡∏£‡∏Ñ {partyName}</h1>
        </header>

        <main className="p-6">
          <h2 className="text-3xl text-white text-center">‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h2>
          <div className="mt-6 bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto">
            <form onSubmit={handleSubmit} className="space-y-4">
              <label className="block font-bold">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
              <input value={campaignName} onChange={(e) => setCampaignName(e.target.value)} required placeholder="‡∏™‡∏£‡πâ‡∏≤‡∏á Floodway ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà" className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
              <textarea value={campaignDes} onChange={(e) => setCampaignDes(e.target.value)} rows={5} required 
              placeholder="‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡∏π‡∏Ñ‡∏•‡∏≠‡∏á ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ñ‡∏π‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Floodway ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á" 
              className="w-full p-2 border border-gray-300 rounded-md" />

              <label className="block font-bold">‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:</label>
              <select
  value={policyId}
  onChange={(e) => {
    const selected = e.target.value;
    setPolicyId(selected);
    if (selected === "special") {
      setPolicyName("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©");
    } else {
      const found = policies.find((p) => p.id.toString() === selected);
      setPolicyName(found?.name || "");
    }
  }}
  required
  className="w-full p-2 border border-gray-300 rounded-md"
>
  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ --</option>
  {policies.map((p) => (
    <option key={p.id} value={p.id}>
      {p.name}
    </option>
  ))}
</select>


              <label className="block font-bold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
              <select value={campaignStatus} onChange={(e) => setCampaignStatus(e.target.value)} required className="w-full p-2 border border-gray-300 rounded-md">
                {["‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•"].map((status) => (
                  <option key={status} value={status}>{status}</option>
                ))}
              </select>

              <label className="block font-bold">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:</label>
              <select value={area} onChange={(e) => setArea(e.target.value)} required className="w-full p-2 border border-gray-300 rounded-md">
                {["‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï", "‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"].map((a) => (
                  <option key={a} value={a}>{a}</option>
                ))}
              </select>

              <label className="block font-bold">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:</label>
              <select value={impact} onChange={(e) => setImpact(e.target.value)} required className="w-full p-2 border border-gray-300 rounded-md">
                {["‡∏ï‡πà‡∏≥", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏™‡∏π‡∏á"].map((i) => (
                  <option key={i} value={i}>{i}</option>
                ))}
              </select>

              <label className="block font-bold">‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥):</label>
              <input value={size} readOnly className="w-full p-2 border border-gray-300 rounded-md bg-gray-100" />

              <label className="block font-bold">‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡∏ö‡∏≤‡∏ó):</label>
<input
  type="text"
  inputMode="numeric"
  value={Number(campaignBudget || 0).toLocaleString("th-TH")}
  onChange={(e) => {
    const raw = e.target.value.replace(/,/g, ""); // ‡∏•‡∏ö ,
    const numeric = parseInt(raw, 10) || 0;
    setCampaignBudget(numeric.toString());
  }}
  required
  placeholder="4,500,000"
  className="w-full p-2 border border-gray-300 rounded-md"
/>


              <label className="block font-bold">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:</label>
              {expenses.map((exp, idx) => (
                <div key={idx} className="flex space-x-2">
    {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ */}
    <input
      type="text"
      value={exp.description}
      onChange={(e) => handleExpenseChange(idx, "description", e.target.value)}
      placeholder="‡∏Ñ‡πà‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
      className="w-2/3 p-2 border rounded"
    />

    {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ , */}
    <input
      type="text"
      inputMode="numeric"
      value={Number(exp.amount || 0).toLocaleString("th-TH")}
      onChange={(e) => {
        const raw = e.target.value.replace(/,/g, "");
        const numeric = parseInt(raw, 10) || 0;
        handleExpenseChange(idx, "amount", numeric.toString()); // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô string
      }}
      placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
      className="w-1/3 p-2 border rounded"
    />
  </div>
))}
              <button type="button" onClick={addExpenseRow} className="text-sm text-blue-500">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>

              <p className="text-gray-500">
                ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {expenses.reduce((sum, e) => sum + Number(e.amount || 0), 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó
              </p>

              


              <label className="block font-bold">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={(e) => {
                  if (e.target.files) {
                    setCampaignPictures([...campaignPictures, ...Array.from(e.target.files)]);
                  }
                }}
                className="w-full"
              />

              {campaignPictures.length > 0 && (
                <div className="mt-4">
                  <h3 className="font-bold text-[#5D5A88] mb-2">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ:</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {campaignPictures.map((file, idx) => (
                      <div key={idx} className="relative">
                        <img
                          src={URL.createObjectURL(file)}
                          alt={`preview-${idx}`}
                          className="rounded-md shadow-md w-full h-auto"
                        />
                        <button
                          type="button"
                          onClick={() =>
                            setCampaignPictures(campaignPictures.filter((_, i) => i !== idx))
                          }
                          className="absolute top-2 right-2 text-white bg-red-500 rounded-full px-2 py-0.5 text-xs hover:bg-red-700"
                        >
                          ‚úï
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}


              {uploadedPictureUrls.length > 0 && (
                <div className="mt-6">
                  <h3 className="font-bold text-[#5D5A88] mb-2">‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß:</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {uploadedPictureUrls.map((url, idx) => (
                      <div key={idx} className="relative">
                        <img
                          src={url}
                          alt={`uploaded-${idx}`}
                          className="rounded-md shadow-md w-full"
                        />
                        <button
                          type="button"
                          onClick={() => {
                            const match = decodeURIComponent(url).match(/\/o\/(.+)\?/);
                            const path = match?.[1];
                            if (!path) return;

                            setPicturesToDelete((prev) => [...prev, path]);
                            setUploadedPictureUrls(uploadedPictureUrls.filter((_, i) => i !== idx));
                          }}
                          className="absolute top-2 right-2 text-white bg-red-600 rounded-full px-2 py-0.5 text-xs hover:bg-red-700"
                        >
                          ‚úï
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}



              <label className="block font-bold">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (PDF):</label>
              <input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, setCampaignRef)} />
              {refPreviewUrl && (
                <a href={refPreviewUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 underline block mt-2">‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (PDF)</a>
              )}

              <button
  type="submit"
  disabled={isSubmitting}
  className={`w-full p-3 rounded-md mt-4 transition
    ${isSubmitting ? "bg-gray-400 cursor-not-allowed" : "bg-[#5D5A88] hover:bg-[#46426b] text-white"}`}
>
  {isSubmitting
    ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."
    : campaignId
    ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
    : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"}
</button>

            </form>
          </div>
        </main>
      </div>
    </div>
  );
}
