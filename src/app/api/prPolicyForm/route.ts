import { NextRequest, NextResponse } from "next/server";
import driver from "@/app/lib/neo4j";
import pg from "@/app/lib/postgres";

// ‚úÖ POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
export async function POST(req: NextRequest) {
  const { name, description, banner, category, party, status } = await req.json(); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° status
  const session = driver.session();

  if (!party || party === "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏£‡∏Ñ") {
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ" }, { status: 400 });
  }

  try {
    const cleanedParty = party.replace(/^‡∏û‡∏£‡∏£‡∏Ñ\s*/g, "").trim();

    const partyResult = await pg.query(
      `SELECT id FROM parties WHERE name = $1`,
      [cleanedParty]
    );

    if (partyResult.rows.length === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö party ‡πÉ‡∏ô PostgreSQL" }, { status: 404 });
    }

    const party_id = partyResult.rows[0].id;

    const duplicateCheck = await pg.query(
      `SELECT id FROM policies WHERE name = $1`,
      [name]
    );

    if ((duplicateCheck.rowCount ?? 0) > 0) {
      return NextResponse.json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" }, { status: 400 });
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô PostgreSQL
    const result = await pg.query(
      `INSERT INTO policies (name, total_budget, created_at, party_id)
       VALUES ($1, 0, NOW(), $2)
       RETURNING id`,
      [name, party_id]
    );

    const id = result.rows[0].id;

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Neo4j
    await session.run(
      `
      MERGE (p:Policy {id: toInteger($id)})
      SET p.name = $name,
          p.description = $description,
          p.banner = $banner,
          p.status = $status,       
          p.like = 0,
          p.progress = "0%"

      WITH p
      MERGE (cat:Category {name: $category})
      MERGE (p)-[:HAS_CATEGORY]->(cat)

      WITH p
      MATCH (pt:Party {name: $party})
      MERGE (p)-[:BELONGS_TO]->(pt)
      `,
      { id, name, description, banner, category, party: cleanedParty, status } 
    );

    return NextResponse.json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", id });
  } catch (err) {
    console.error("‚ùå POST error:", err);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" }, { status: 500 });
  } finally {
    await session.close();
  }
}

// ‚úÖ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
export async function PUT(req: NextRequest) {
  const { id, name, description, banner, category, status } = await req.json(); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° status
  const session = driver.session();

  if (!id) {
    return NextResponse.json({ error: "Missing policy ID" }, { status: 400 });
  }

  try {
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Neo4j
    await session.run(
      `
      MATCH (p:Policy {id: toInteger($id)})
      SET p.name = $name,
          p.description = $description,
          p.banner = $banner,
          p.status = $status         // üëà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
      `,
      { id, name, description, banner, status }
    );

    // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°
    await session.run(
      `
      MATCH (p:Policy {id: toInteger($id)})-[r:HAS_CATEGORY]->()
      DELETE r
      `,
      { id }
    );

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
    await session.run(
      `
      MATCH (p:Policy {id: toInteger($id)})
      MERGE (c:Category {name: $category})
      MERGE (p)-[:HAS_CATEGORY]->(c)
      `,
      { id, category }
    );

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PostgreSQL (‡∏´‡∏≤‡∏Å‡∏°‡∏µ field ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
    await pg.query(
      `UPDATE policies SET name = $1 WHERE id = $2`,
      [name, id]
    );

    return NextResponse.json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå PUT error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ" }, { status: 500 });
  } finally {
    await session.close();
  }
}
