import { NextRequest, NextResponse } from "next/server";
import driver from "@/app/lib/neo4j";

// üëâ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ‡∏ï‡∏≤‡∏° id
export async function GET(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const { id } = await context.params;
  const idNumber = parseInt(id);

  if (isNaN(idNumber)) {
    return NextResponse.json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
  }



  const session = driver.session();

  try {
    const result = await session.run(
      `
      MATCH (p:Party {id: $id})
      RETURN p.name AS name, p.description AS description, p.link AS link, p.logo AS logo
      `,
      { id: idNumber}
    );

    if (result.records.length === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ" }, { status: 404 });
    }

    const record = result.records[0];
    return NextResponse.json({
      name: record.get("name"),
      description: record.get("description"),
      link: record.get("link"),
      logo: record.get("logo"), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° logo
    });
  } catch (error) {
    console.error("‚ùå Error fetching party by id:", error);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" }, { status: 500 });
  } finally {
    await session.close();
  }
}

// üëâ POST: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏£‡∏Ñ (name, description, link, logo)
export async function POST(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const { id } = await context.params;
  const idNumber = parseInt(id);

  if (isNaN(idNumber)) {
    return NextResponse.json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
  }




  const session = driver.session();
  const { name, description, link, logo } = await req.json(); // ‚úÖ ‡∏£‡∏±‡∏ö logo

  try {
    await session.run(
      `
      MERGE (p:Party {id: $id})
      SET p.name = $name,
          p.description = $description,
          p.link = $link,
          p.logo = $logo
      `,
      { id: idNumber, name, description, link, logo }
    );

    return NextResponse.json({ message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error saving party:", error);
    return NextResponse.json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" }, { status: 500 });
  } finally {
    await session.close();
  }
}


