import { NextRequest, NextResponse } from "next/server";
import driver from "@/app/lib/neo4j";

// üîπ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏° ID
export async function GET(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const { id } = await context.params;
  const idNumber = parseInt(id);
  if (isNaN(idNumber)) return NextResponse.json({ error: "Invalid ID" }, { status: 400 });

  const session = driver.session();

  try {
    const result = await session.run(
      `
      MATCH (e:Event {id: toInteger($id)})
      OPTIONAL MATCH (e)-[:LOCATED_IN]->(prov:Province)
      OPTIONAL MATCH (e)-[:RELATED_POLICY]->(po:Policy)
      OPTIONAL MATCH (e)-[:UNDER_CAMPAIGN]->(c:Campaign)
      RETURN e.name AS name, e.description AS description, e.date AS date, e.status AS status, 
             e.time AS time, e.location AS location, e.map AS map,
             prov.name AS province,
             po.name AS policy,
             c.name AS campaign
      `,
      { id: idNumber }
    );

    if (result.records.length === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" }, { status: 404 });
    }

    const r = result.records[0];
    return NextResponse.json({
      name: r.get("name"),
      description: r.get("description"),
      date: r.get("date"),
      time: r.get("time"),
      location: r.get("location"),
      map: r.get("map"),
      status: r.get("status") ?? null,
      province: r.get("province") ?? null,
      policy: r.get("policy") ?? null,
      campaign: r.get("campaign") ?? null,
    });
  } catch (err) {
    console.error("GET error:", err);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" }, { status: 500 });
  } finally {
    await session.close();
  }
}

// üîπ DELETE: ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏° ID
export async function DELETE(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const { id } = await context.params;
  const idNumber = parseInt(id);
  if (isNaN(idNumber)) return NextResponse.json({ error: "Invalid ID" }, { status: 400 });

  const session = driver.session();

  try {
    await session.run(
      `MATCH (e:Event {id: toInteger($id)}) DETACH DELETE e`,
      { id: idNumber }
    );

    return NextResponse.json({ message: "‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("DELETE error:", err);
    return NextResponse.json({ error: "‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" }, { status: 500 });
  } finally {
    await session.close();
  }
}

// üîπ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏° ID
export async function PUT(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const { id } = await context.params;
  const idNumber = parseInt(id);
  if (isNaN(idNumber)) return NextResponse.json({ error: "Invalid ID" }, { status: 400 });

  const {
    name, description, date, time, location, map,
    policy, campaign, province, status
  } = await req.json();

  const session = driver.session();

  try {
    // üî∏ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï properties ‡∏´‡∏•‡∏±‡∏Å
    await session.run(
      `
      MATCH (e:Event {id: toInteger($id)})
      SET e.name = $name,
          e.description = $description,
          e.date = $date,
          e.time = $time,
          e.location = $location,
          e.map = $map,
          e.status = $status
      `,
      { id: idNumber, name, description, date, time, location, map, status }
    );

    // üî∏ ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°
    await session.run(
      `
      MATCH (e:Event {id: toInteger($id)})
      OPTIONAL MATCH (e)-[r:RELATED_POLICY|UNDER_CAMPAIGN|LOCATED_IN]->()
      DELETE r
      `,
      { id: idNumber }
    );

    // üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
    if (policy) {
  await session.run(
    `
    MATCH (e:Event {id: toInteger($id)})
    MATCH (p:Policy {name: $policy})
    MERGE (e)-[:RELATED_POLICY]->(p)
    `,
    { id: idNumber, policy }
  );
}

// ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ DELETE ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å if
await session.run(
  `
  MATCH (e:Event {id: toInteger($id)})-[r:UNDER_CAMPAIGN]->()
  DELETE r
  `,
  { id: idNumber }
);

if (campaign && campaign.trim() !== "") {
  await session.run(
    `
    MATCH (e:Event {id: toInteger($id)})
    MATCH (c:Campaign {name: $campaign})
    MERGE (e)-[:UNDER_CAMPAIGN]->(c)
    `,
    { id: idNumber, campaign }
  );
}

if (province) {
  await session.run(
    `
    MATCH (e:Event {id: toInteger($id)})
    MERGE (prov:Province {name: $province})
    MERGE (e)-[:LOCATED_IN]->(prov)
    `,
    { id: idNumber, province }
  );
}

    return NextResponse.json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("PUT error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ" }, { status: 500 });
  } finally {
    await session.close();
  }
}
